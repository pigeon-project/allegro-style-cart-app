name: Plan
on:
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  plan:
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node 22 (required by @github/copilot >=0.0.336)
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Create a test issue to verify permissions
        run: |
          gh issue create --repo pigeon-project/allegro-style-cart-app --title "Test Issue for Permissions" --body "This is a test issue to verify that the workflow has permission to create issues." || {
            echo "::error::Failed to create test issue. Check repository permissions."
            exit 1
          }

      - name: Install Copilot CLI
        run: npm install -g @github/copilot

      - name: Verify spec directory
        run: |
          if [ ! -d spec ]; then
            echo "::error::spec directory missing"
            exit 1
          fi
          if [ ! -f spec/SPEC.md ]; then
            echo "::warning::spec/SPEC.md not found; listing files for diagnostics"
            find spec -maxdepth 2 -type f -print
          fi

      - name: Ensure labels exist
        run: |
          gh label create frontend --description "Frontend development tasks" --color "1D76DB" 2>/dev/null || true
          gh label create backend  --description "Backend development tasks"  --color "0E8A16" 2>/dev/null || true

      - name: Plan work
        working-directory: .
        env:
          GH_TOKEN: ${{ secrets.COPILOT_PAT }}
        run: |
          PROMPT="Read all files under ./spec starting from ./spec/SPEC.md for repository '$PROJECT_NAME'. \n
          Break work into small, developer-friendly chunks. \n
          Each chunk should correspond to a GitHub issue with a clear title, detailed description, acceptance criteria, \n
          labels, and references to the specification part which is realized by this issue. \n
          The repository already contains the runtime base. Analyze it and focus on creating issues only. \n
          Ensure all requirements from the specification are covered. \n\
          Focus solely on the planning part. \n\n

          OUTPUT: \n
          Produce a JSON Lines list (one JSON object per line) of planned GitHub issues into the 'planned_issues.jsonl' file. \n
          Each object MUST have: title, body, labels (array). \n
          Use only labels: frontend or backend (choose at least one). \n
          Body have to include: \n
          - the issue description \n
          - a bullet list of acceptance criteria \n
          - references to relevant specification sections \n
          - hardcoded sentence: 'Start with the development branch and create pull request to it as well'. \n
          Do NOT create Github issues. Output ONLY valid JSON Lines with no extra commentary to the 'planned_issues.jsonl' file. \n
          When writing to the file, print also to standard output for logging purposes."
          copilot -p "${PROMPT}" --allow-all-tools --deny-tool 'shell(rm)' --deny-tool 'shell(sudo)'

          if [ ! -s planned_issues.jsonl ]; then
            echo "::error::planned_issues.jsonl is empty"
            exit 1
          fi

          echo "Planned issues count:"
          wc -l planned_issues.jsonl
          echo "First 3 lines preview:"
          head -n 3 planned_issues.jsonl

          # Validate json structure for the first 5 lines
          head -n 5 planned_issues.jsonl | jq -e '.title,.body,.labels' >/dev/null || {
            echo "::error::JSON structure validation failed"
            exit 1
          }

      - name: Create Github issues
        working-directory: .
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ ! -f planned_issues.jsonl ]; then
            echo "::error::planned_issues.jsonl missing"
            exit 1
          fi

          CREATED=0
          while IFS= read -r line; do
            [ -z "$line" ] && continue
            TITLE=$(echo "$line" | jq -r '.title // empty')
            BODY=$(echo "$line" | jq -r '.body // empty')
            LABELS=$(echo "$line" | jq -r '.labels | join(",")')
            if [ -z "$TITLE" ]; then
              echo "::warning::Skipping line without title"
              continue
            fi
            echo "Creating issue: $TITLE"
            CMD="gh issue create --repo \"$PROJECT_NAME\" --title \"$TITLE\" --body \"$BODY\""
            if [ -n "$LABELS" ]; then
              CMD="$CMD --label \"$LABELS\""
            fi
            eval $CMD && CREATED=$((CREATED+1)) || echo "::error::Failed to create issue: $TITLE"
            sleep 1
          done < planned_issues.jsonl

          echo "Total created issues: $CREATED"
          if [ "$CREATED" -eq 0 ]; then
            echo "::warning::No issues created"
          fi
